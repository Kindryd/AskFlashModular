version: '3.8'

services:
  # Infrastructure Services
  postgres:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=askflashdb
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./infrastructure/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "askflash123", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT_ENABLE_WEB_UI=true

  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: askflash_rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-askflash}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-askflash123}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./infrastructure/rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    restart: unless-stopped

  adminer:
    image: adminer
    restart: always
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres

  # Frontend Service
  frontend:
    build:
      context: ./containers/frontend.container
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000/ws
      - REACT_APP_BRAND_NAME=Flash AI Assistant
      - REACT_APP_BRAND_COLOR=#7ed321
      - REACT_APP_BRAND_EMOJI=üêÑ
      - REACT_APP_ENABLE_STREAMING=true
      - REACT_APP_ENABLE_THINKING_STEPS=true
      - REACT_APP_ENABLE_DARK_MODE=true
    depends_on:
      - gateway
    restart: unless-stopped

  # Core Application Services
  conversation:
    build:
      context: ./containers/conversation.container
    ports:
      - "8001:8001"
    environment:
      - POSTGRES_URL=postgresql://postgres:postgres@postgres/askflashdb
      - REDIS_URL=redis://redis:6379
      - AI_ORCHESTRATOR_URL=http://ai-orchestrator:8000
      - EMBEDDING_SERVICE_URL=http://embedding:8000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  embedding:
    build:
      context: ./containers/embedding.container
    ports:
      - "8002:8002"
    environment:
      - POSTGRES_URL=postgresql://postgres:postgres@postgres/askflashdb
      - REDIS_URL=redis://redis:6379
      - QDRANT_URL=http://qdrant:6333
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_started
    restart: unless-stopped

  mcp:
    build:
      context: ./containers/mcp.container
    ports:
      - "8003:8003"
    environment:
      - POSTGRES_URL=postgresql://postgres:postgres@postgres/askflashdb
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=${RABBITMQ_USER:-askflash}
      - RABBITMQ_PASS=${RABBITMQ_PASS:-askflash123}
      - LOCAL_LLM_URL=http://local-llm:8000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  # ========================================
  # MCP AGENT CONTAINERS
  # ========================================
  
  intent-agent:
    build:
      context: ./containers/intent-agent.container
    ports:
      - "8010:8010"
    environment:
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=askflash123
      - RABBITMQ_URL=amqp://askflash:askflash123@rabbitmq:5672/
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  executor-agent:
    build:
      context: ./containers/executor-agent.container
    ports:
      - "8011:8011"
    environment:
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=askflash123
      - RABBITMQ_URL=amqp://askflash:askflash123@rabbitmq:5672/
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  websearch-agent:
    build:
      context: ./containers/websearch-agent.container
    ports:
      - "8012:8012"
    environment:
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=askflash123
      - RABBITMQ_URL=amqp://askflash:askflash123@rabbitmq:5672/
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  moderator-agent:
    build:
      context: ./containers/moderator-agent.container
    ports:
      - "8013:8013"
    environment:
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=askflash123
      - RABBITMQ_URL=amqp://askflash:askflash123@rabbitmq:5672/
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  # ========================================
  # INCOMPLETE CONTAINERS - COMMENTED OUT
  # ========================================
  # Uncomment these when ready to implement
  
  # project-manager:
  #   build:
  #     context: ./containers/project-manager.container
  #   ports:
  #     - "8004:8004"
  #   environment:
  #     - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/askflashdb
  #     - REDIS_URL=redis://redis:6379
  #     - AI_ORCHESTRATOR_URL=http://ai-orchestrator:8003
  #     - EMBEDDING_SERVICE_URL=http://embedding:8002
  #     - CONVERSATION_SERVICE_URL=http://conversation:8001
  #     # Teams integration (uncomment and configure when needed)
  #     # - TEAMS_WEBHOOK_URL=https://outlook.office.com/webhook/your-webhook-url
  #     # JIRA integration (uncomment and configure when needed)
  #     # - JIRA_URL=https://your-domain.atlassian.net
  #     # - JIRA_TOKEN=your-jira-api-token
  #     # - JIRA_USERNAME=your-email@domain.com
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   restart: unless-stopped

  # Adaptive Learning Engine Container
  adaptive-engine:
    build: ./containers/adaptive-engine.container
    container_name: askflash-adaptive-engine
    ports:
      - "8015:8015"
    environment:
      - POSTGRES_URL=postgresql://askflash:askflash123@postgres:5432/askflashdb
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=askflash123
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - ANALYSIS_BATCH_SIZE=100
      - LEARNING_THRESHOLD=0.8
      - PATTERN_DETECTION_WINDOW_DAYS=7
      - MIN_INTERACTIONS_FOR_PERSONA=5
      - PERSONA_CONFIDENCE_THRESHOLD=0.7
      - ENABLE_PERSONA_BUILDING=true
      - ENABLE_KNOWLEDGE_EVOLUTION=true
      - ENABLE_PATTERN_ANALYSIS=true
      - ENABLE_CROSS_USER_LEARNING=true
    depends_on:
      - postgres
      - redis
      - qdrant
    networks:
      - askflash-network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8015/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  gateway:
    build:
      context: ./containers/gateway.container
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - CONVERSATION_SERVICE_URL=http://conversation:8001
      - EMBEDDING_SERVICE_URL=http://embedding:8002
      - AI_ORCHESTRATOR_URL=http://mcp:8003
      - MCP_URL=http://mcp:8003
      - PROJECT_MANAGER_URL=http://project-manager:8000
      - ADAPTIVE_ENGINE_URL=http://adaptive-engine:8015
      - ANALYTICS_URL=http://analytics:8000
    depends_on:
      - conversation
      - embedding
      - mcp
      - redis
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  qdrant_data:
  rabbitmq_data: 