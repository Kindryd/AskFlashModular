version: '3.8'

services:
  # Infrastructure Services
  postgres:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=askflashdb
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT_ENABLE_WEB_UI=true

  adminer:
    image: adminer
    restart: always
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres

  # Core Application Services
  conversation:
    build:
      context: ./containers/conversation.container
    ports:
      - "8001:8000"
    environment:
      - POSTGRES_URL=postgresql://postgres:postgres@postgres/askflashdb
      - REDIS_URL=redis://redis:6379
      - AI_ORCHESTRATOR_URL=http://ai-orchestrator:8000
      - EMBEDDING_SERVICE_URL=http://embedding:8000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  embedding:
    build:
      context: ./containers/embedding.container
    ports:
      - "8002:8000"
    environment:
      - POSTGRES_URL=postgresql://postgres:postgres@postgres/askflashdb
      - REDIS_URL=redis://redis:6379
      - QDRANT_URL=http://qdrant:6333
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_started
    restart: unless-stopped

  ai-orchestrator:
    build:
      context: ./containers/ai-orchestrator.container
    ports:
      - "8003:8000"
    environment:
      - POSTGRES_URL=postgresql://postgres:postgres@postgres/askflashdb
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOCAL_LLM_URL=http://local-llm:8000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  project-manager:
    build:
      context: ./containers/project-manager.container
    ports:
      - "8004:8000"
    environment:
      - POSTGRES_URL=postgresql://postgres:postgres@postgres/askflashdb
      - REDIS_URL=redis://redis:6379
      - JIRA_URL=${JIRA_URL}
      - JIRA_TOKEN=${JIRA_TOKEN}
      - TEAMS_WEBHOOK_URL=${TEAMS_WEBHOOK_URL}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  adaptive-engine:
    build:
      context: ./containers/adaptive-engine.container
    ports:
      - "8005:8000"
    environment:
      - POSTGRES_URL=postgresql://postgres:postgres@postgres/askflashdb
      - REDIS_URL=redis://redis:6379
      - QDRANT_URL=http://qdrant:6333
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_started
    restart: unless-stopped

  local-llm:
    build:
      context: ./containers/local-llm.container
    ports:
      - "8006:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - MODEL_NAME=mistral-7b-instruct
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    # Uncomment if you have GPU support
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

  analytics:
    build:
      context: ./containers/analytics.container
    ports:
      - "8007:8000"
    environment:
      - POSTGRES_URL=postgresql://postgres:postgres@postgres/askflashdb
      - REDIS_URL=redis://redis:6379
      - S3_BUCKET=${ANALYTICS_S3_BUCKET}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  gateway:
    build:
      context: ./containers/gateway.container
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - CONVERSATION_SERVICE_URL=http://conversation:8000
      - EMBEDDING_SERVICE_URL=http://embedding:8000
      - AI_ORCHESTRATOR_URL=http://ai-orchestrator:8000
      - PROJECT_MANAGER_URL=http://project-manager:8000
      - ADAPTIVE_ENGINE_URL=http://adaptive-engine:8000
      - ANALYTICS_URL=http://analytics:8000
    depends_on:
      - conversation
      - embedding
      - ai-orchestrator
      - project-manager
      - adaptive-engine
      - analytics
      - redis
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  qdrant_data: 