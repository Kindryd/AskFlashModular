version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.split-requirements
      cache_from:
        - flash-ai-backend:latest
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_SERVER=db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=askflash
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      # Microsoft Teams Bot Framework Settings
      - TEAMS_APP_ID=${TEAMS_APP_ID}
      - TEAMS_APP_PASSWORD=${TEAMS_APP_PASSWORD}
      - TEAMS_TENANT_ID=${TEAMS_TENANT_ID}
      - API_URL=${API_URL:-http://localhost:8000}
      - ENVIRONMENT=development
      - LOG_LEVEL=DEBUG
    volumes:
      - ./backend:/app
    depends_on:
      db:
        condition: service_healthy
      qdrant:
        condition: service_started
    deploy:
      #resources:
      #  limits:
      #    cpus: '3.0'
      #    memory: 3G
      #  reservations:
      #    cpus: '0.75'
      #    memory: 1.5G
    # See askflash-codebase.mdc for codebase structure and conventions

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      cache_from:
        - flash-ai-frontend:latest
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - npm-cache:/root/.npm
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    depends_on:
      - backend
    # Resource limitations removed to allow full access to system resources for compilation
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '0.5'
    #       memory: 512M
    #     reservations:
    #       cpus: '0.1'
    #       memory: 256M

  db:
    image: postgres:13
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=askflash
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 256M

  adminer:
    image: adminer
    restart: always
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: db
    depends_on:
      - db

  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT_ENABLE_WEB_UI=true
    # Resource limitations removed to allow full access to system resources
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '1'
    #       memory: 2G
    #     reservations:
    #       cpus: '0.5'
    #       memory: 1G

volumes:
  postgres_data:
  qdrant_data:
  pip-cache:
  npm-cache: 