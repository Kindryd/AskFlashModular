"""initial migration

Revision ID: 6693e3dae783
Revises: 
Create Date: 2025-05-19 20:31:54.233022

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import json, os


# revision identifiers, used by Alembic.
revision: str = '6693e3dae783'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('role',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_role_id'), 'role', ['id'], unique=False)
    op.create_index(op.f('ix_role_name'), 'role', ['name'], unique=True)
    op.create_table('user',
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('full_name', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_superuser', sa.Boolean(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)
    op.create_index(op.f('ix_user_id'), 'user', ['id'], unique=False)
    op.create_table('ruleset',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('search_priority', sa.JSON(), nullable=False),
    sa.Column('response_guidelines', sa.JSON(), nullable=False),
    sa.Column('context_rules', sa.JSON(), nullable=False),
    sa.Column('ai_behavior_rules', sa.JSON(), nullable=False),
    sa.Column('conversation_rules', sa.JSON(), nullable=False),
    sa.Column('mode_settings', sa.JSON(), nullable=False),
    sa.Column('response_format', sa.JSON(), nullable=False),
    sa.Column('notion_config', sa.JSON(), nullable=True),
    sa.Column('azure_devops_config', sa.JSON(), nullable=True),
    sa.Column('github_config', sa.JSON(), nullable=True),
    sa.Column('dynatrace_config', sa.JSON(), nullable=True),
    sa.Column('created_by_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['created_by_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_ruleset_id'), 'ruleset', ['id'], unique=False)
    op.create_table('user_roles',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'role_id')
    )
    op.create_table('searchhistory',
    sa.Column('query', sa.String(), nullable=False),
    sa.Column('response', sa.String(), nullable=False),
    sa.Column('sources_used', sa.JSON(), nullable=True),
    sa.Column('ruleset_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['ruleset_id'], ['ruleset.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_searchhistory_id'), 'searchhistory', ['id'], unique=False)
    # --- WIKI TABLES ---
    op.create_table(
        'wiki_indexes',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('wiki_name', sa.String(), nullable=False),
        sa.Column('wiki_id', sa.String(), nullable=False),
        sa.Column('project_id', sa.String(), nullable=False),
        sa.Column('last_indexed', sa.DateTime(), nullable=False),
        sa.Column('meta_data', sa.JSON(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('wiki_id', name='uq_wiki_index_wiki_id'),
        schema='public'
    )
    op.create_index(op.f('ix_wiki_indexes_wiki_id'), 'wiki_indexes', ['wiki_id'], unique=False, schema='public')
    op.create_table(
        'wiki_pages',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('wiki_index_id', sa.Integer(), nullable=False),
        sa.Column('page_path', sa.String(), nullable=False),
        sa.Column('page_id', sa.Integer(), nullable=True),
        sa.Column('title', sa.String(), nullable=False),
        sa.Column('url', sa.String(), nullable=False),
        sa.Column('remote_url', sa.String(), nullable=False),
        sa.Column('content', sa.String(), nullable=True),
        sa.Column('last_updated', sa.DateTime(), nullable=False),
        sa.Column('meta_data', sa.JSON(), nullable=True),
        sa.Column('parent_page_id', sa.Integer(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(['parent_page_id'], ['wiki_pages.id'], ondelete='SET NULL'),
        sa.ForeignKeyConstraint(['wiki_index_id'], ['wiki_indexes.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('wiki_index_id', 'page_path', name='uq_wiki_page_path'),
        schema='public'
    )
    op.create_index(op.f('ix_wiki_pages_page_id'), 'wiki_pages', ['page_id'], unique=False, schema='public')
    op.create_table(
        'wiki_page_keywords',
        sa.Column('wiki_page_id', sa.Integer(), nullable=False),
        sa.Column('keyword', sa.String(), nullable=False),
        sa.ForeignKeyConstraint(['wiki_page_id'], ['wiki_pages.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('wiki_page_id', 'keyword'),
        schema='public'
    )
    op.create_table(
        'wiki_page_tags',
        sa.Column('wiki_page_id', sa.Integer(), nullable=False),
        sa.Column('tag', sa.String(), nullable=False),
        sa.ForeignKeyConstraint(['wiki_page_id'], ['wiki_pages.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('wiki_page_id', 'tag'),
        schema='public'
    )
    # --- END WIKI TABLES ---
    # ### end Alembic commands ###

    # Insert default user and ruleset
    conn = op.get_bind()
    from datetime import datetime
    now = datetime.utcnow()
    # Insert default admin user
    result = conn.execute(sa.text('''
        INSERT INTO "user" (email, hashed_password, full_name, is_active, is_superuser, created_at, updated_at)
        VALUES (:email, :hashed_password, :full_name, :is_active, :is_superuser, :created_at, :updated_at)
        RETURNING id
    '''), {
        "email": "admin@askflash.local",
        "hashed_password": "$2b$12$C6UzMDM.H6dfI/f/IKcEeO5Fh5Qp1Yy1Z1Z1Z1Z1Z1Z1Z1Z1Z1Z1G",  # bcrypt for 'admin' (placeholder)
        "full_name": "Default Admin",
        "is_active": True,
        "is_superuser": True,
        "created_at": now,
        "updated_at": now
    })
    admin_user_id = result.scalar()

    # Insert default wiki index and pages (from cleaned_wiki_index.json)
    json_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', 'cleaned_wiki_index.json'))
    if not os.path.exists(json_path):
        json_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '..', 'cleaned_wiki_index.json'))
    if not os.path.exists(json_path):
        json_path = '/app/cleaned_wiki_index.json'
    if not os.path.exists(json_path):
        json_path = 'cleaned_wiki_index.json'
    with open(json_path, 'r') as f:
        wiki_structure = json.load(f)
    wiki_name = 'SRE-DevOPS'
    wiki_id = 'dc66cbaa-0364-42e8-9a23-044deb186015'
    project_id = 'SRE-DevOPS'
    result = conn.execute(sa.text('''
        INSERT INTO wiki_indexes (wiki_name, wiki_id, project_id, last_indexed, meta_data, created_at, updated_at)
        VALUES (:wiki_name, :wiki_id, :project_id, :last_indexed, :meta_data, :created_at, :updated_at)
        RETURNING id
    '''), {
        "wiki_name": wiki_name,
        "wiki_id": wiki_id,
        "project_id": project_id,
        "last_indexed": now,
        "meta_data": json.dumps({}),
        "created_at": now,
        "updated_at": now
    })
    wiki_index_id = result.scalar()
    page_id_map = {}
    for entry in wiki_structure:
        result = conn.execute(sa.text('''
            INSERT INTO wiki_pages (
                wiki_index_id, page_path, title, url, remote_url, 
                content, last_updated, meta_data, created_at, updated_at
            )
            VALUES (
                :wiki_index_id, :page_path, :title, :url, :remote_url,
                :content, :last_updated, :meta_data, :created_at, :updated_at
            )
            RETURNING id
        '''), {
            "wiki_index_id": wiki_index_id,
            "page_path": entry['path'],
            "title": entry['title'],
            "url": f"/wiki/{entry['path'].replace(' ', '-').lower()}",
            "remote_url": "",
            "content": None,
            "last_updated": now,
            "meta_data": json.dumps({
                "level": entry['level'],
                "parent_path": entry['path'].rsplit('/', 1)[0] if '/' in entry['path'] else None
            }),
            "created_at": now,
            "updated_at": now
        })
        page_id_map[entry['path']] = result.scalar()
    for entry in wiki_structure:
        if '/' in entry['path']:
            parent_path = entry['path'].rsplit('/', 1)[0]
            page_id = page_id_map[entry['path']]
            parent_page_id = page_id_map.get(parent_path)
            if parent_page_id:
                conn.execute(sa.text('''
                    UPDATE wiki_pages 
                    SET parent_page_id = :parent_page_id
                    WHERE id = :page_id
                '''), {
                    "parent_page_id": parent_page_id,
                    "page_id": page_id
                })


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_searchhistory_id'), table_name='searchhistory')
    op.drop_table('searchhistory')
    op.drop_table('user_roles')
    op.drop_index(op.f('ix_ruleset_id'), table_name='ruleset')
    op.drop_table('ruleset')
    op.drop_index(op.f('ix_user_id'), table_name='user')
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.drop_table('user')
    op.drop_index(op.f('ix_role_name'), table_name='role')
    op.drop_index(op.f('ix_role_id'), table_name='role')
    op.drop_table('role')
    # ### end Alembic commands ###
